# defines a contract - yes, this is an interface
from typing import Protocol


class HistoryIterator(Protocol):
    def __next__(self) -> tuple[int, str, float]: ...


# protocol uses structural typing
class History(Protocol):
    def append_history_entry(self, operation: str, operand: float) -> None: ...

    def remove_history_entry(self, entry_id: int) -> None: ...

    def clear_history_entries(self) -> None: ...

    # def save_history(self) -> None: ...

    # def load_history(self) -> None: ...

    def bulk_import(
        self, history_entries: list[tuple[int, str, float]]
    ) -> None: ...

    def __iter__(self) -> HistoryIterator: ...
